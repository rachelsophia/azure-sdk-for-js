/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ImportJobs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureDigitalTwinsAPI } from "../azureDigitalTwinsAPI";
import {
  BulkImportJob,
  ImportJobsListNextOptionalParams,
  ImportJobsListOptionalParams,
  ImportJobsListResponse,
  ImportJobsAddOptionalParams,
  ImportJobsAddResponse,
  ImportJobsGetByIdOptionalParams,
  ImportJobsGetByIdResponse,
  ImportJobsDeleteOptionalParams,
  ImportJobsCancelOptionalParams,
  ImportJobsCancelResponse,
  ImportJobsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ImportJobs operations. */
export class ImportJobsImpl implements ImportJobs {
  private readonly client: AzureDigitalTwinsAPI;

  /**
   * Initialize a new instance of the class ImportJobs class.
   * @param client Reference to the service client
   */
  constructor(client: AzureDigitalTwinsAPI) {
    this.client = client;
  }

  /**
   * Retrieves all bulk import jobs.
   * Status codes:
   * * 200 OK
   * @param options The options parameters.
   */
  public list(
    options?: ImportJobsListOptionalParams
  ): PagedAsyncIterableIterator<BulkImportJob> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: ImportJobsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BulkImportJob[]> {
    let result: ImportJobsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: ImportJobsListOptionalParams
  ): AsyncIterableIterator<BulkImportJob> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Retrieves all bulk import jobs.
   * Status codes:
   * * 200 OK
   * @param options The options parameters.
   */
  private _list(
    options?: ImportJobsListOptionalParams
  ): Promise<ImportJobsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Creates a bulk import job.
   * Status codes:
   * * 201 Created
   * * 400 Bad Request
   *   * JobLimitReached - The maximum number of bulk import jobs allowed has been reached.
   *   * ValidationFailed - The bulk job request is not valid.
   * @param id The id for the bulk import job. The id is unique within the service and case sensitive.
   * @param importJob The bulk import job being added.
   * @param options The options parameters.
   */
  add(
    id: string,
    importJob: BulkImportJob,
    options?: ImportJobsAddOptionalParams
  ): Promise<ImportJobsAddResponse> {
    return this.client.sendOperationRequest(
      { id, importJob, options },
      addOperationSpec
    );
  }

  /**
   * Retrieves a bulk job.
   * Status codes:
   * * 200 OK
   * * 404 Not Found
   *   * BulkJobNotFound - The bulk job was not found.
   * @param id The id for the bulk import job. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  getById(
    id: string,
    options?: ImportJobsGetByIdOptionalParams
  ): Promise<ImportJobsGetByIdResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      getByIdOperationSpec
    );
  }

  /**
   * Deletes a bulk import job.
   * Status codes:
   * * 204 No Content
   * * 400 Bad Request
   *   * ValidationFailed - The bulk job request is not valid.
   * @param id The id for the bulk import job. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  delete(id: string, options?: ImportJobsDeleteOptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { id, options },
      deleteOperationSpec
    );
  }

  /**
   * Cancels a bulk import job.
   * Status codes:
   * * 200 Request Accepted
   * * 400 Bad Request
   *   * ValidationFailed - The bulk job request is not valid.
   * @param id The id for the bulk import job. The id is unique within the service and case sensitive.
   * @param options The options parameters.
   */
  cancel(
    id: string,
    options?: ImportJobsCancelOptionalParams
  ): Promise<ImportJobsCancelResponse> {
    return this.client.sendOperationRequest(
      { id, options },
      cancelOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ImportJobsListNextOptionalParams
  ): Promise<ImportJobsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/imports",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BulkImportJobCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.resultsPerPage],
  serializer
};
const addOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/imports/{id}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.BulkImportJob
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.importJob,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/imports/{id}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BulkImportJob
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/imports/{id}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path: "/jobs/imports/{id}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BulkImportJob
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.id],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BulkImportJobCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.resultsPerPage],
  serializer
};
